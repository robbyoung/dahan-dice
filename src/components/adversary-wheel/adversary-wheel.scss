@use "sass:map";
@import '../../variables.scss';

$skew-map: (3: 30deg, 4: 0deg, 5: -18deg, 6: -29.709deg, 7: -38.428deg, 8: -45deg);
$flag-scale-map: (3: 100%, 4: 100%, 5: 90%, 6: 80%, 7: 70%, 8: 70%);
$flag-left-map: (3: 23px, 4: 20px, 5: 5px, 6: 0px, 7: -15px, 8: -20px);
$flag-bottom-map: (3: 60px, 4: 40px, 5: 35px, 6: 30px, 7: 20px, 8: 25px);

.adversary-wheel {
    overflow:hidden;
    position: relative;
    margin: 1em auto;
    border:  2px solid black;
    padding: 0;
    width: 80vw;
    height: 80vw;
    max-width: 450px;
    max-height: 450px;
    border-radius: 50%;
    cursor: pointer;
    list-style: none;

    $max-adversaries: 8;

    @for $n from 1 to $max-adversaries+1 {
        $skew-degrees: map.get($skew-map, $n);

        &.slices-#{$n} {
            @for $i from 0 to $n {
                .slice-#{$i} {
                    transform: rotate(#{calc($i * 360 / $n)}deg) skewY($skew-degrees);
                    overflow: hidden;
                    position: absolute;
                    top: -25%;
                    right: -25%;
                    width: 75%;
                    height: 75%;
                    transform-origin: 0% 100%;
                    border: 1px solid black;
                }

                &.selected-#{$i} {
                    $slice-degrees: #{calc(360deg / $n)};
                    $degrees-to-spin: #{calc(360deg * 5 + $slice-degrees * ($n - $i - 1) + $slice-degrees / 2)};

                    &.wheel-spin-enter-active {
                        animation: wheel-spin-#{$i}-#{$n} 3s 0ms cubic-bezier(0,0,0,.99);
                    }
                
                    &.wheel-spin-enter-active, &.wheel-spin-enter-done {
                        transform: rotate(#{$degrees-to-spin});
                    }
    
                    @keyframes wheel-spin-#{$i}-#{$n} {
                        0%   { transform: rotate(0deg); }
                        100% { transform: rotate(#{$degrees-to-spin}); }
                    }
                }
            }

            .slice-contents {
                transform: skewY(-$skew-degrees);
                position: absolute;
                bottom: map.get($flag-bottom-map, $n);
                left: map.get($flag-left-map, $n);
                margin-left: auto;
                margin-right: auto;

                img {
                    transform: rotate(#{calc(360 / $n / 2 + 90)}deg);
                    scale: map.get($flag-scale-map, $n);
                }
            }
        }
    }

    &.disabled {
        cursor: default;
    }

    .slice-bp {
        background-color: #A6A194;
    }

    .slice-en {
        background-color: #D9D0BF;
    }

    .slice-sw {
        background-color: #385C73;
    }

    .slice-fr {
        background-color: #BFBDB0;
    }

    .slice-hb {
        background-color: #BFA939;
    }

    .slice-ru {
        background-color: #8C2B34;
    }

    .slice-sc {
        background-color: #365B73;
    }

    .slice-hm {
        background-color: #BFA939;
    }
}

.arrow-down {
    position: absolute;
    left: 0px;
    right: 0px;
    margin-left: auto;
    margin-right: auto;
    top: 120px;
    width: 0; 
    height: 0; 
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-top: 20px solid black;
  }
